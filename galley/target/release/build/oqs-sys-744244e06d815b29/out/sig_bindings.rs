/* automatically generated by rust-bindgen 0.69.5 */

pub const OQS_SIG_STFL_alg_xmss_sha256_h10: &[u8; 17] = b"XMSS-SHA2_10_256\0";
pub const OQS_SIG_STFL_alg_xmss_sha256_h16: &[u8; 17] = b"XMSS-SHA2_16_256\0";
pub const OQS_SIG_STFL_alg_xmss_sha256_h20: &[u8; 17] = b"XMSS-SHA2_20_256\0";
pub const OQS_SIG_STFL_alg_xmss_shake128_h10: &[u8; 18] = b"XMSS-SHAKE_10_256\0";
pub const OQS_SIG_STFL_alg_xmss_shake128_h16: &[u8; 18] = b"XMSS-SHAKE_16_256\0";
pub const OQS_SIG_STFL_alg_xmss_shake128_h20: &[u8; 18] = b"XMSS-SHAKE_20_256\0";
pub const OQS_SIG_STFL_alg_xmss_sha512_h10: &[u8; 17] = b"XMSS-SHA2_10_512\0";
pub const OQS_SIG_STFL_alg_xmss_sha512_h16: &[u8; 17] = b"XMSS-SHA2_16_512\0";
pub const OQS_SIG_STFL_alg_xmss_sha512_h20: &[u8; 17] = b"XMSS-SHA2_20_512\0";
pub const OQS_SIG_STFL_alg_xmss_shake256_h10: &[u8; 18] = b"XMSS-SHAKE_10_512\0";
pub const OQS_SIG_STFL_alg_xmss_shake256_h16: &[u8; 18] = b"XMSS-SHAKE_16_512\0";
pub const OQS_SIG_STFL_alg_xmss_shake256_h20: &[u8; 18] = b"XMSS-SHAKE_20_512\0";
pub const OQS_SIG_STFL_alg_xmss_sha256_h10_192: &[u8; 17] = b"XMSS-SHA2_10_192\0";
pub const OQS_SIG_STFL_alg_xmss_sha256_h16_192: &[u8; 17] = b"XMSS-SHA2_16_192\0";
pub const OQS_SIG_STFL_alg_xmss_sha256_h20_192: &[u8; 17] = b"XMSS-SHA2_20_192\0";
pub const OQS_SIG_STFL_alg_xmss_shake256_h10_192: &[u8; 21] = b"XMSS-SHAKE256_10_192\0";
pub const OQS_SIG_STFL_alg_xmss_shake256_h16_192: &[u8; 21] = b"XMSS-SHAKE256_16_192\0";
pub const OQS_SIG_STFL_alg_xmss_shake256_h20_192: &[u8; 21] = b"XMSS-SHAKE256_20_192\0";
pub const OQS_SIG_STFL_alg_xmss_shake256_h10_256: &[u8; 21] = b"XMSS-SHAKE256_10_256\0";
pub const OQS_SIG_STFL_alg_xmss_shake256_h16_256: &[u8; 21] = b"XMSS-SHAKE256_16_256\0";
pub const OQS_SIG_STFL_alg_xmss_shake256_h20_256: &[u8; 21] = b"XMSS-SHAKE256_20_256\0";
pub const OQS_SIG_STFL_alg_xmssmt_sha256_h20_2: &[u8; 21] = b"XMSSMT-SHA2_20/2_256\0";
pub const OQS_SIG_STFL_alg_xmssmt_sha256_h20_4: &[u8; 21] = b"XMSSMT-SHA2_20/4_256\0";
pub const OQS_SIG_STFL_alg_xmssmt_sha256_h40_2: &[u8; 21] = b"XMSSMT-SHA2_40/2_256\0";
pub const OQS_SIG_STFL_alg_xmssmt_sha256_h40_4: &[u8; 21] = b"XMSSMT-SHA2_40/4_256\0";
pub const OQS_SIG_STFL_alg_xmssmt_sha256_h40_8: &[u8; 21] = b"XMSSMT-SHA2_40/8_256\0";
pub const OQS_SIG_STFL_alg_xmssmt_sha256_h60_3: &[u8; 21] = b"XMSSMT-SHA2_60/3_256\0";
pub const OQS_SIG_STFL_alg_xmssmt_sha256_h60_6: &[u8; 21] = b"XMSSMT-SHA2_60/6_256\0";
pub const OQS_SIG_STFL_alg_xmssmt_sha256_h60_12: &[u8; 22] = b"XMSSMT-SHA2_60/12_256\0";
pub const OQS_SIG_STFL_alg_xmssmt_shake128_h20_2: &[u8; 22] = b"XMSSMT-SHAKE_20/2_256\0";
pub const OQS_SIG_STFL_alg_xmssmt_shake128_h20_4: &[u8; 22] = b"XMSSMT-SHAKE_20/4_256\0";
pub const OQS_SIG_STFL_alg_xmssmt_shake128_h40_2: &[u8; 22] = b"XMSSMT-SHAKE_40/2_256\0";
pub const OQS_SIG_STFL_alg_xmssmt_shake128_h40_4: &[u8; 22] = b"XMSSMT-SHAKE_40/4_256\0";
pub const OQS_SIG_STFL_alg_xmssmt_shake128_h40_8: &[u8; 22] = b"XMSSMT-SHAKE_40/8_256\0";
pub const OQS_SIG_STFL_alg_xmssmt_shake128_h60_3: &[u8; 22] = b"XMSSMT-SHAKE_60/3_256\0";
pub const OQS_SIG_STFL_alg_xmssmt_shake128_h60_6: &[u8; 22] = b"XMSSMT-SHAKE_60/6_256\0";
pub const OQS_SIG_STFL_alg_xmssmt_shake128_h60_12: &[u8; 23] = b"XMSSMT-SHAKE_60/12_256\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h5_w1: &[u8; 17] = b"LMS_SHA256_H5_W1\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h5_w2: &[u8; 17] = b"LMS_SHA256_H5_W2\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h5_w4: &[u8; 17] = b"LMS_SHA256_H5_W4\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h5_w8: &[u8; 17] = b"LMS_SHA256_H5_W8\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h10_w1: &[u8; 18] = b"LMS_SHA256_H10_W1\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h10_w2: &[u8; 18] = b"LMS_SHA256_H10_W2\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h10_w4: &[u8; 18] = b"LMS_SHA256_H10_W4\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h10_w8: &[u8; 18] = b"LMS_SHA256_H10_W8\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h15_w1: &[u8; 18] = b"LMS_SHA256_H15_W1\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h15_w2: &[u8; 18] = b"LMS_SHA256_H15_W2\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h15_w4: &[u8; 18] = b"LMS_SHA256_H15_W4\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h15_w8: &[u8; 18] = b"LMS_SHA256_H15_W8\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h20_w1: &[u8; 18] = b"LMS_SHA256_H20_W1\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h20_w2: &[u8; 18] = b"LMS_SHA256_H20_W2\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h20_w4: &[u8; 18] = b"LMS_SHA256_H20_W4\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h20_w8: &[u8; 18] = b"LMS_SHA256_H20_W8\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h25_w1: &[u8; 18] = b"LMS_SHA256_H25_W1\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h25_w2: &[u8; 18] = b"LMS_SHA256_H25_W2\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h25_w4: &[u8; 18] = b"LMS_SHA256_H25_W4\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h25_w8: &[u8; 18] = b"LMS_SHA256_H25_W8\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h5_w8_h5_w8: &[u8; 23] = b"LMS_SHA256_H5_W8_H5_W8\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h10_w4_h5_w8: &[u8; 24] = b"LMS_SHA256_H10_W4_H5_W8\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h10_w8_h5_w8: &[u8; 24] = b"LMS_SHA256_H10_W8_H5_W8\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h10_w2_h10_w2: &[u8; 25] = b"LMS_SHA256_H10_W2_H10_W2\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h10_w4_h10_w4: &[u8; 25] = b"LMS_SHA256_H10_W4_H10_W4\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h10_w8_h10_w8: &[u8; 25] = b"LMS_SHA256_H10_W8_H10_W8\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h15_w8_h5_w8: &[u8; 24] = b"LMS_SHA256_H15_W8_H5_W8\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h15_w8_h10_w8: &[u8; 25] = b"LMS_SHA256_H15_W8_H10_W8\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h15_w8_h15_w8: &[u8; 25] = b"LMS_SHA256_H15_W8_H15_W8\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h20_w8_h5_w8: &[u8; 24] = b"LMS_SHA256_H20_W8_H5_W8\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h20_w8_h10_w8: &[u8; 25] = b"LMS_SHA256_H20_W8_H10_W8\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h20_w8_h15_w8: &[u8; 25] = b"LMS_SHA256_H20_W8_H15_W8\0";
pub const OQS_SIG_STFL_alg_lms_sha256_h20_w8_h20_w8: &[u8; 25] = b"LMS_SHA256_H20_W8_H20_W8\0";
pub const OQS_SIG_STFL_algs_length: u32 = 70;
pub const OQS_SIG_alg_dilithium_2: &[u8; 11] = b"Dilithium2\0";
pub const OQS_SIG_alg_dilithium_3: &[u8; 11] = b"Dilithium3\0";
pub const OQS_SIG_alg_dilithium_5: &[u8; 11] = b"Dilithium5\0";
pub const OQS_SIG_alg_ml_dsa_44: &[u8; 10] = b"ML-DSA-44\0";
pub const OQS_SIG_alg_ml_dsa_65: &[u8; 10] = b"ML-DSA-65\0";
pub const OQS_SIG_alg_ml_dsa_87: &[u8; 10] = b"ML-DSA-87\0";
pub const OQS_SIG_alg_falcon_512: &[u8; 11] = b"Falcon-512\0";
pub const OQS_SIG_alg_falcon_1024: &[u8; 12] = b"Falcon-1024\0";
pub const OQS_SIG_alg_falcon_padded_512: &[u8; 18] = b"Falcon-padded-512\0";
pub const OQS_SIG_alg_falcon_padded_1024: &[u8; 19] = b"Falcon-padded-1024\0";
pub const OQS_SIG_alg_sphincs_sha2_128f_simple: &[u8; 26] = b"SPHINCS+-SHA2-128f-simple\0";
pub const OQS_SIG_alg_sphincs_sha2_128s_simple: &[u8; 26] = b"SPHINCS+-SHA2-128s-simple\0";
pub const OQS_SIG_alg_sphincs_sha2_192f_simple: &[u8; 26] = b"SPHINCS+-SHA2-192f-simple\0";
pub const OQS_SIG_alg_sphincs_sha2_192s_simple: &[u8; 26] = b"SPHINCS+-SHA2-192s-simple\0";
pub const OQS_SIG_alg_sphincs_sha2_256f_simple: &[u8; 26] = b"SPHINCS+-SHA2-256f-simple\0";
pub const OQS_SIG_alg_sphincs_sha2_256s_simple: &[u8; 26] = b"SPHINCS+-SHA2-256s-simple\0";
pub const OQS_SIG_alg_sphincs_shake_128f_simple: &[u8; 27] = b"SPHINCS+-SHAKE-128f-simple\0";
pub const OQS_SIG_alg_sphincs_shake_128s_simple: &[u8; 27] = b"SPHINCS+-SHAKE-128s-simple\0";
pub const OQS_SIG_alg_sphincs_shake_192f_simple: &[u8; 27] = b"SPHINCS+-SHAKE-192f-simple\0";
pub const OQS_SIG_alg_sphincs_shake_192s_simple: &[u8; 27] = b"SPHINCS+-SHAKE-192s-simple\0";
pub const OQS_SIG_alg_sphincs_shake_256f_simple: &[u8; 27] = b"SPHINCS+-SHAKE-256f-simple\0";
pub const OQS_SIG_alg_sphincs_shake_256s_simple: &[u8; 27] = b"SPHINCS+-SHAKE-256s-simple\0";
pub const OQS_SIG_alg_mayo_1: &[u8; 7] = b"MAYO-1\0";
pub const OQS_SIG_alg_mayo_2: &[u8; 7] = b"MAYO-2\0";
pub const OQS_SIG_alg_mayo_3: &[u8; 7] = b"MAYO-3\0";
pub const OQS_SIG_alg_mayo_5: &[u8; 7] = b"MAYO-5\0";
pub const OQS_SIG_alg_cross_rsdp_128_balanced: &[u8; 24] = b"cross-rsdp-128-balanced\0";
pub const OQS_SIG_alg_cross_rsdp_128_fast: &[u8; 20] = b"cross-rsdp-128-fast\0";
pub const OQS_SIG_alg_cross_rsdp_128_small: &[u8; 21] = b"cross-rsdp-128-small\0";
pub const OQS_SIG_alg_cross_rsdp_192_balanced: &[u8; 24] = b"cross-rsdp-192-balanced\0";
pub const OQS_SIG_alg_cross_rsdp_192_fast: &[u8; 20] = b"cross-rsdp-192-fast\0";
pub const OQS_SIG_alg_cross_rsdp_192_small: &[u8; 21] = b"cross-rsdp-192-small\0";
pub const OQS_SIG_alg_cross_rsdp_256_balanced: &[u8; 24] = b"cross-rsdp-256-balanced\0";
pub const OQS_SIG_alg_cross_rsdp_256_fast: &[u8; 20] = b"cross-rsdp-256-fast\0";
pub const OQS_SIG_alg_cross_rsdp_256_small: &[u8; 21] = b"cross-rsdp-256-small\0";
pub const OQS_SIG_alg_cross_rsdpg_128_balanced: &[u8; 25] = b"cross-rsdpg-128-balanced\0";
pub const OQS_SIG_alg_cross_rsdpg_128_fast: &[u8; 21] = b"cross-rsdpg-128-fast\0";
pub const OQS_SIG_alg_cross_rsdpg_128_small: &[u8; 22] = b"cross-rsdpg-128-small\0";
pub const OQS_SIG_alg_cross_rsdpg_192_balanced: &[u8; 25] = b"cross-rsdpg-192-balanced\0";
pub const OQS_SIG_alg_cross_rsdpg_192_fast: &[u8; 21] = b"cross-rsdpg-192-fast\0";
pub const OQS_SIG_alg_cross_rsdpg_192_small: &[u8; 22] = b"cross-rsdpg-192-small\0";
pub const OQS_SIG_alg_cross_rsdpg_256_balanced: &[u8; 25] = b"cross-rsdpg-256-balanced\0";
pub const OQS_SIG_alg_cross_rsdpg_256_fast: &[u8; 21] = b"cross-rsdpg-256-fast\0";
pub const OQS_SIG_alg_cross_rsdpg_256_small: &[u8; 22] = b"cross-rsdpg-256-small\0";
pub const OQS_SIG_algs_length: u32 = 44;
pub const OQS_SIG_dilithium_2_length_public_key: u32 = 1312;
pub const OQS_SIG_dilithium_2_length_secret_key: u32 = 2528;
pub const OQS_SIG_dilithium_2_length_signature: u32 = 2420;
pub const OQS_SIG_dilithium_3_length_public_key: u32 = 1952;
pub const OQS_SIG_dilithium_3_length_secret_key: u32 = 4000;
pub const OQS_SIG_dilithium_3_length_signature: u32 = 3293;
pub const OQS_SIG_dilithium_5_length_public_key: u32 = 2592;
pub const OQS_SIG_dilithium_5_length_secret_key: u32 = 4864;
pub const OQS_SIG_dilithium_5_length_signature: u32 = 4595;
pub const OQS_SIG_ml_dsa_44_length_public_key: u32 = 1312;
pub const OQS_SIG_ml_dsa_44_length_secret_key: u32 = 2560;
pub const OQS_SIG_ml_dsa_44_length_signature: u32 = 2420;
pub const OQS_SIG_ml_dsa_65_length_public_key: u32 = 1952;
pub const OQS_SIG_ml_dsa_65_length_secret_key: u32 = 4032;
pub const OQS_SIG_ml_dsa_65_length_signature: u32 = 3309;
pub const OQS_SIG_ml_dsa_87_length_public_key: u32 = 2592;
pub const OQS_SIG_ml_dsa_87_length_secret_key: u32 = 4896;
pub const OQS_SIG_ml_dsa_87_length_signature: u32 = 4627;
pub const OQS_SIG_falcon_512_length_public_key: u32 = 897;
pub const OQS_SIG_falcon_512_length_secret_key: u32 = 1281;
pub const OQS_SIG_falcon_512_length_signature: u32 = 752;
pub const OQS_SIG_falcon_1024_length_public_key: u32 = 1793;
pub const OQS_SIG_falcon_1024_length_secret_key: u32 = 2305;
pub const OQS_SIG_falcon_1024_length_signature: u32 = 1462;
pub const OQS_SIG_falcon_padded_512_length_public_key: u32 = 897;
pub const OQS_SIG_falcon_padded_512_length_secret_key: u32 = 1281;
pub const OQS_SIG_falcon_padded_512_length_signature: u32 = 666;
pub const OQS_SIG_falcon_padded_1024_length_public_key: u32 = 1793;
pub const OQS_SIG_falcon_padded_1024_length_secret_key: u32 = 2305;
pub const OQS_SIG_falcon_padded_1024_length_signature: u32 = 1280;
pub const OQS_SIG_sphincs_sha2_128f_simple_length_public_key: u32 = 32;
pub const OQS_SIG_sphincs_sha2_128f_simple_length_secret_key: u32 = 64;
pub const OQS_SIG_sphincs_sha2_128f_simple_length_signature: u32 = 17088;
pub const OQS_SIG_sphincs_sha2_128s_simple_length_public_key: u32 = 32;
pub const OQS_SIG_sphincs_sha2_128s_simple_length_secret_key: u32 = 64;
pub const OQS_SIG_sphincs_sha2_128s_simple_length_signature: u32 = 7856;
pub const OQS_SIG_sphincs_sha2_192f_simple_length_public_key: u32 = 48;
pub const OQS_SIG_sphincs_sha2_192f_simple_length_secret_key: u32 = 96;
pub const OQS_SIG_sphincs_sha2_192f_simple_length_signature: u32 = 35664;
pub const OQS_SIG_sphincs_sha2_192s_simple_length_public_key: u32 = 48;
pub const OQS_SIG_sphincs_sha2_192s_simple_length_secret_key: u32 = 96;
pub const OQS_SIG_sphincs_sha2_192s_simple_length_signature: u32 = 16224;
pub const OQS_SIG_sphincs_sha2_256f_simple_length_public_key: u32 = 64;
pub const OQS_SIG_sphincs_sha2_256f_simple_length_secret_key: u32 = 128;
pub const OQS_SIG_sphincs_sha2_256f_simple_length_signature: u32 = 49856;
pub const OQS_SIG_sphincs_sha2_256s_simple_length_public_key: u32 = 64;
pub const OQS_SIG_sphincs_sha2_256s_simple_length_secret_key: u32 = 128;
pub const OQS_SIG_sphincs_sha2_256s_simple_length_signature: u32 = 29792;
pub const OQS_SIG_sphincs_shake_128f_simple_length_public_key: u32 = 32;
pub const OQS_SIG_sphincs_shake_128f_simple_length_secret_key: u32 = 64;
pub const OQS_SIG_sphincs_shake_128f_simple_length_signature: u32 = 17088;
pub const OQS_SIG_sphincs_shake_128s_simple_length_public_key: u32 = 32;
pub const OQS_SIG_sphincs_shake_128s_simple_length_secret_key: u32 = 64;
pub const OQS_SIG_sphincs_shake_128s_simple_length_signature: u32 = 7856;
pub const OQS_SIG_sphincs_shake_192f_simple_length_public_key: u32 = 48;
pub const OQS_SIG_sphincs_shake_192f_simple_length_secret_key: u32 = 96;
pub const OQS_SIG_sphincs_shake_192f_simple_length_signature: u32 = 35664;
pub const OQS_SIG_sphincs_shake_192s_simple_length_public_key: u32 = 48;
pub const OQS_SIG_sphincs_shake_192s_simple_length_secret_key: u32 = 96;
pub const OQS_SIG_sphincs_shake_192s_simple_length_signature: u32 = 16224;
pub const OQS_SIG_sphincs_shake_256f_simple_length_public_key: u32 = 64;
pub const OQS_SIG_sphincs_shake_256f_simple_length_secret_key: u32 = 128;
pub const OQS_SIG_sphincs_shake_256f_simple_length_signature: u32 = 49856;
pub const OQS_SIG_sphincs_shake_256s_simple_length_public_key: u32 = 64;
pub const OQS_SIG_sphincs_shake_256s_simple_length_secret_key: u32 = 128;
pub const OQS_SIG_sphincs_shake_256s_simple_length_signature: u32 = 29792;
pub const OQS_SIG_mayo_1_length_public_key: u32 = 1168;
pub const OQS_SIG_mayo_1_length_secret_key: u32 = 24;
pub const OQS_SIG_mayo_1_length_signature: u32 = 321;
pub const OQS_SIG_mayo_2_length_public_key: u32 = 5488;
pub const OQS_SIG_mayo_2_length_secret_key: u32 = 24;
pub const OQS_SIG_mayo_2_length_signature: u32 = 180;
pub const OQS_SIG_mayo_3_length_public_key: u32 = 2656;
pub const OQS_SIG_mayo_3_length_secret_key: u32 = 32;
pub const OQS_SIG_mayo_3_length_signature: u32 = 577;
pub const OQS_SIG_mayo_5_length_public_key: u32 = 5008;
pub const OQS_SIG_mayo_5_length_secret_key: u32 = 40;
pub const OQS_SIG_mayo_5_length_signature: u32 = 838;
pub const OQS_SIG_cross_rsdp_128_balanced_length_public_key: u32 = 77;
pub const OQS_SIG_cross_rsdp_128_balanced_length_secret_key: u32 = 32;
pub const OQS_SIG_cross_rsdp_128_balanced_length_signature: u32 = 12912;
pub const OQS_SIG_cross_rsdp_128_fast_length_public_key: u32 = 77;
pub const OQS_SIG_cross_rsdp_128_fast_length_secret_key: u32 = 32;
pub const OQS_SIG_cross_rsdp_128_fast_length_signature: u32 = 19152;
pub const OQS_SIG_cross_rsdp_128_small_length_public_key: u32 = 77;
pub const OQS_SIG_cross_rsdp_128_small_length_secret_key: u32 = 32;
pub const OQS_SIG_cross_rsdp_128_small_length_signature: u32 = 10080;
pub const OQS_SIG_cross_rsdp_192_balanced_length_public_key: u32 = 115;
pub const OQS_SIG_cross_rsdp_192_balanced_length_secret_key: u32 = 48;
pub const OQS_SIG_cross_rsdp_192_balanced_length_signature: u32 = 28222;
pub const OQS_SIG_cross_rsdp_192_fast_length_public_key: u32 = 115;
pub const OQS_SIG_cross_rsdp_192_fast_length_secret_key: u32 = 48;
pub const OQS_SIG_cross_rsdp_192_fast_length_signature: u32 = 42682;
pub const OQS_SIG_cross_rsdp_192_small_length_public_key: u32 = 115;
pub const OQS_SIG_cross_rsdp_192_small_length_secret_key: u32 = 48;
pub const OQS_SIG_cross_rsdp_192_small_length_signature: u32 = 23642;
pub const OQS_SIG_cross_rsdp_256_balanced_length_public_key: u32 = 153;
pub const OQS_SIG_cross_rsdp_256_balanced_length_secret_key: u32 = 64;
pub const OQS_SIG_cross_rsdp_256_balanced_length_signature: u32 = 51056;
pub const OQS_SIG_cross_rsdp_256_fast_length_public_key: u32 = 153;
pub const OQS_SIG_cross_rsdp_256_fast_length_secret_key: u32 = 64;
pub const OQS_SIG_cross_rsdp_256_fast_length_signature: u32 = 76298;
pub const OQS_SIG_cross_rsdp_256_small_length_public_key: u32 = 153;
pub const OQS_SIG_cross_rsdp_256_small_length_secret_key: u32 = 64;
pub const OQS_SIG_cross_rsdp_256_small_length_signature: u32 = 43592;
pub const OQS_SIG_cross_rsdpg_128_balanced_length_public_key: u32 = 54;
pub const OQS_SIG_cross_rsdpg_128_balanced_length_secret_key: u32 = 32;
pub const OQS_SIG_cross_rsdpg_128_balanced_length_signature: u32 = 9236;
pub const OQS_SIG_cross_rsdpg_128_fast_length_public_key: u32 = 54;
pub const OQS_SIG_cross_rsdpg_128_fast_length_secret_key: u32 = 32;
pub const OQS_SIG_cross_rsdpg_128_fast_length_signature: u32 = 12472;
pub const OQS_SIG_cross_rsdpg_128_small_length_public_key: u32 = 54;
pub const OQS_SIG_cross_rsdpg_128_small_length_secret_key: u32 = 32;
pub const OQS_SIG_cross_rsdpg_128_small_length_signature: u32 = 7956;
pub const OQS_SIG_cross_rsdpg_192_balanced_length_public_key: u32 = 83;
pub const OQS_SIG_cross_rsdpg_192_balanced_length_secret_key: u32 = 48;
pub const OQS_SIG_cross_rsdpg_192_balanced_length_signature: u32 = 23380;
pub const OQS_SIG_cross_rsdpg_192_fast_length_public_key: u32 = 83;
pub const OQS_SIG_cross_rsdpg_192_fast_length_secret_key: u32 = 48;
pub const OQS_SIG_cross_rsdpg_192_fast_length_signature: u32 = 27404;
pub const OQS_SIG_cross_rsdpg_192_small_length_public_key: u32 = 83;
pub const OQS_SIG_cross_rsdpg_192_small_length_secret_key: u32 = 48;
pub const OQS_SIG_cross_rsdpg_192_small_length_signature: u32 = 18188;
pub const OQS_SIG_cross_rsdpg_256_balanced_length_public_key: u32 = 106;
pub const OQS_SIG_cross_rsdpg_256_balanced_length_secret_key: u32 = 64;
pub const OQS_SIG_cross_rsdpg_256_balanced_length_signature: u32 = 40134;
pub const OQS_SIG_cross_rsdpg_256_fast_length_public_key: u32 = 106;
pub const OQS_SIG_cross_rsdpg_256_fast_length_secret_key: u32 = 64;
pub const OQS_SIG_cross_rsdpg_256_fast_length_signature: u32 = 48938;
pub const OQS_SIG_cross_rsdpg_256_small_length_public_key: u32 = 106;
pub const OQS_SIG_cross_rsdpg_256_small_length_secret_key: u32 = 64;
pub const OQS_SIG_cross_rsdpg_256_small_length_signature: u32 = 32742;
extern "C" {
    pub fn OQS_SIG_alg_identifier(i: usize) -> *const ::libc::c_char;
}
extern "C" {
    pub fn OQS_SIG_alg_count() -> ::libc::c_int;
}
extern "C" {
    pub fn OQS_SIG_alg_is_enabled(method_name: *const ::libc::c_char) -> ::libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OQS_SIG {
    pub method_name: *const ::libc::c_char,
    pub alg_version: *const ::libc::c_char,
    pub claimed_nist_level: u8,
    pub euf_cma: bool,
    pub sig_with_ctx_support: bool,
    pub length_public_key: usize,
    pub length_secret_key: usize,
    pub length_signature: usize,
    pub keypair: ::core::option::Option<
        unsafe extern "C" fn(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS,
    >,
    pub sign: ::core::option::Option<
        unsafe extern "C" fn(
            signature: *mut u8,
            signature_len: *mut usize,
            message: *const u8,
            message_len: usize,
            secret_key: *const u8,
        ) -> OQS_STATUS,
    >,
    pub sign_with_ctx_str: ::core::option::Option<
        unsafe extern "C" fn(
            signature: *mut u8,
            signature_len: *mut usize,
            message: *const u8,
            message_len: usize,
            ctx_str: *const u8,
            ctx_str_len: usize,
            secret_key: *const u8,
        ) -> OQS_STATUS,
    >,
    pub verify: ::core::option::Option<
        unsafe extern "C" fn(
            message: *const u8,
            message_len: usize,
            signature: *const u8,
            signature_len: usize,
            public_key: *const u8,
        ) -> OQS_STATUS,
    >,
    pub verify_with_ctx_str: ::core::option::Option<
        unsafe extern "C" fn(
            message: *const u8,
            message_len: usize,
            signature: *const u8,
            signature_len: usize,
            ctx_str: *const u8,
            ctx_str_len: usize,
            public_key: *const u8,
        ) -> OQS_STATUS,
    >,
}
#[test]
fn bindgen_test_layout_OQS_SIG() {
    const UNINIT: ::core::mem::MaybeUninit<OQS_SIG> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<OQS_SIG>(),
        88usize,
        concat!("Size of: ", stringify!(OQS_SIG))
    );
    assert_eq!(
        ::core::mem::align_of::<OQS_SIG>(),
        8usize,
        concat!("Alignment of ", stringify!(OQS_SIG))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).method_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OQS_SIG),
            "::",
            stringify!(method_name)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).alg_version) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OQS_SIG),
            "::",
            stringify!(alg_version)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).claimed_nist_level) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(OQS_SIG),
            "::",
            stringify!(claimed_nist_level)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).euf_cma) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(OQS_SIG),
            "::",
            stringify!(euf_cma)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sig_with_ctx_support) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(OQS_SIG),
            "::",
            stringify!(sig_with_ctx_support)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).length_public_key) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OQS_SIG),
            "::",
            stringify!(length_public_key)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).length_secret_key) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OQS_SIG),
            "::",
            stringify!(length_secret_key)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).length_signature) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(OQS_SIG),
            "::",
            stringify!(length_signature)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).keypair) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(OQS_SIG),
            "::",
            stringify!(keypair)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sign) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(OQS_SIG),
            "::",
            stringify!(sign)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sign_with_ctx_str) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(OQS_SIG),
            "::",
            stringify!(sign_with_ctx_str)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).verify) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(OQS_SIG),
            "::",
            stringify!(verify)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).verify_with_ctx_str) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(OQS_SIG),
            "::",
            stringify!(verify_with_ctx_str)
        )
    );
}
extern "C" {
    pub fn OQS_SIG_new(method_name: *const ::libc::c_char) -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_keypair(
        sig: *const OQS_SIG,
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sign(
        sig: *const OQS_SIG,
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sign_with_ctx_str(
        sig: *const OQS_SIG,
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx_str: *const u8,
        ctx_str_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_verify(
        sig: *const OQS_SIG,
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_verify_with_ctx_str(
        sig: *const OQS_SIG,
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx_str: *const u8,
        ctx_str_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_free(sig: *mut OQS_SIG);
}
extern "C" {
    pub fn OQS_SIG_dilithium_2_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_dilithium_2_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_2_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_2_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_2_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_2_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_3_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_dilithium_3_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_3_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_3_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_3_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_3_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_5_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_dilithium_5_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_5_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_5_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_5_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_dilithium_5_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_ml_dsa_44_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_ml_dsa_44_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_ml_dsa_44_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_ml_dsa_44_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_ml_dsa_44_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_ml_dsa_44_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_ml_dsa_65_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_ml_dsa_65_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_ml_dsa_65_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_ml_dsa_65_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_ml_dsa_65_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_ml_dsa_65_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_ml_dsa_87_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_ml_dsa_87_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_ml_dsa_87_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_ml_dsa_87_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_ml_dsa_87_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_ml_dsa_87_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_512_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_falcon_512_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_512_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_512_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_512_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_512_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_1024_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_falcon_1024_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_1024_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_1024_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_1024_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_1024_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_padded_512_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_falcon_padded_512_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_padded_512_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_padded_512_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_padded_512_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_padded_512_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_padded_1024_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_falcon_padded_1024_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_padded_1024_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_padded_1024_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_padded_1024_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_falcon_padded_1024_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_128f_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_128f_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_128f_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_128f_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_128f_simple_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_128f_simple_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_128s_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_128s_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_128s_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_128s_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_128s_simple_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_128s_simple_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_192f_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_192f_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_192f_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_192f_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_192f_simple_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_192f_simple_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_192s_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_192s_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_192s_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_192s_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_192s_simple_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_192s_simple_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_256f_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_256f_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_256f_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_256f_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_256f_simple_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_256f_simple_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_256s_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_256s_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_256s_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_256s_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_256s_simple_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_sha2_256s_simple_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_128f_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_128f_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_128f_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_128f_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_128f_simple_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_128f_simple_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_128s_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_128s_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_128s_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_128s_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_128s_simple_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_128s_simple_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_192f_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_192f_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_192f_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_192f_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_192f_simple_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_192f_simple_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_192s_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_192s_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_192s_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_192s_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_192s_simple_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_192s_simple_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_256f_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_256f_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_256f_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_256f_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_256f_simple_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_256f_simple_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_256s_simple_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_256s_simple_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_256s_simple_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_256s_simple_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_256s_simple_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_sphincs_shake_256s_simple_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_mayo_1_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_mayo_1_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_mayo_1_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_mayo_1_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_mayo_1_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_mayo_1_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_mayo_2_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_mayo_2_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_mayo_2_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_mayo_2_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_mayo_2_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_mayo_2_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_mayo_3_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_mayo_3_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_mayo_3_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_mayo_3_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_mayo_3_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_mayo_3_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_mayo_5_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_mayo_5_keypair(public_key: *mut u8, secret_key: *mut u8) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_mayo_5_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_mayo_5_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_mayo_5_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_mayo_5_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_128_balanced_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_128_balanced_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_128_balanced_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_128_balanced_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_128_balanced_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_128_balanced_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_128_fast_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_128_fast_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_128_fast_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_128_fast_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_128_fast_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_128_fast_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_128_small_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_128_small_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_128_small_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_128_small_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_128_small_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_128_small_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_192_balanced_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_192_balanced_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_192_balanced_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_192_balanced_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_192_balanced_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_192_balanced_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_192_fast_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_192_fast_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_192_fast_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_192_fast_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_192_fast_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_192_fast_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_192_small_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_192_small_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_192_small_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_192_small_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_192_small_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_192_small_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_256_balanced_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_256_balanced_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_256_balanced_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_256_balanced_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_256_balanced_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_256_balanced_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_256_fast_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_256_fast_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_256_fast_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_256_fast_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_256_fast_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_256_fast_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_256_small_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_256_small_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_256_small_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_256_small_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_256_small_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdp_256_small_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_128_balanced_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_128_balanced_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_128_balanced_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_128_balanced_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_128_balanced_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_128_balanced_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_128_fast_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_128_fast_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_128_fast_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_128_fast_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_128_fast_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_128_fast_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_128_small_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_128_small_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_128_small_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_128_small_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_128_small_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_128_small_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_192_balanced_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_192_balanced_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_192_balanced_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_192_balanced_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_192_balanced_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_192_balanced_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_192_fast_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_192_fast_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_192_fast_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_192_fast_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_192_fast_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_192_fast_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_192_small_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_192_small_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_192_small_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_192_small_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_192_small_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_192_small_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_256_balanced_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_256_balanced_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_256_balanced_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_256_balanced_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_256_balanced_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_256_balanced_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_256_fast_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_256_fast_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_256_fast_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_256_fast_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_256_fast_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_256_fast_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_256_small_new() -> *mut OQS_SIG;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_256_small_keypair(
        public_key: *mut u8,
        secret_key: *mut u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_256_small_sign(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_256_small_verify(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_256_small_sign_with_ctx_str(
        signature: *mut u8,
        signature_len: *mut usize,
        message: *const u8,
        message_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        secret_key: *const u8,
    ) -> OQS_STATUS;
}
extern "C" {
    pub fn OQS_SIG_cross_rsdpg_256_small_verify_with_ctx_str(
        message: *const u8,
        message_len: usize,
        signature: *const u8,
        signature_len: usize,
        ctx: *const u8,
        ctxlen: usize,
        public_key: *const u8,
    ) -> OQS_STATUS;
}
